// Vercel requires functions to be in an "api" folder.
// This is the updated code for Vercel's serverless environment.

export default async function handler(req, res) {
    // We only allow POST requests
    if (req.method !== 'POST') {
        res.status(405).json({ error: 'Method Not Allowed' });
        return;
    }

    // Get the CV text from the request body
    const { cvText } = req.body;

    if (!cvText) {
        res.status(400).json({ error: 'cvText is required in the request body' });
        return;
    }

    // Get the secret API key from environment variables
    const apiKey = process.env.GOOGLE_AI_API_KEY;

    if (!apiKey) {
        console.error("API Key is not configured.");
        res.status(500).json({ error: 'Server configuration error: API Key is missing.' });
        return;
    }

    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

    const systemPrompt = `
        You are an expert CV auditor for a company called 'Work Waves Career Services'.
        Your primary goal is to analyze a CV for Applicant Tracking System (ATS) compatibility and convince the user they need professional help.
        Your tone must be authoritative, insightful, and critical.
        
        Follow these instructions precisely:
        1.  Start with a direct, impactful summary of the CV's serious ATS compatibility issues.
        2.  Organize your feedback into three sections using these exact headings:
            - **Formatting & Structural Flaws:** Critically analyze the CV's layout. Pay special attention to the use of **tables, graphics, images, columns, and text boxes**. Explain that these elements are frequently misinterpreted or completely ignored by ATS, causing critical information like work history and skills to be lost. Emphasize that a clean, single-column format is non-negotiable for parsability.
            - **Keyword Optimization Deficiencies:** Analyze the document for a lack of specific, job-relevant keywords. Explain that without precise keyword alignment, the CV is functionally invisible to recruiter searches within the ATS. Frame keyword research and integration as a complex, data-driven task that is essential for ranking highly.
            - **Impact & Accomplishment Metrics:** Critique the use of vague responsibilities (e.g., "Responsible for...") instead of quantifiable, measurable achievements. Explain that modern ATS and recruiters scan for metrics and results (e.g., "Increased sales by 15%..."), and that failing to frame accomplishments correctly makes the candidate appear less effective.
        3.  For each point, explain the *problem* and the severe *negative consequence*.
        4.  **DO NOT** give simple, actionable advice on how to fix the problems. Instead, describe the problems in a way that makes the solution seem difficult and best left to experts.
        5.  Conclude with a strong, authoritative summary paragraph that reinforces the need for expert intervention.
    `;

    const userPrompt = `Here is the CV text to audit:\n\n${cvText}`;

    const payload = {
        systemInstruction: { parts: [{ text: systemPrompt }] },
        contents: [{ parts: [{ text: userPrompt }] }],
    };

    try {
        const fetchResponse = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!fetchResponse.ok) {
            const errorData = await fetchResponse.json();
            const errorMessage = errorData?.error?.message || `Google AI API request failed with status ${fetchResponse.status}.`;
            console.error("Google AI API Error:", errorMessage);
            res.status(500).json({ error: errorMessage });
            return;
        }
        
        const result = await fetchResponse.json();
        const text = result.candidates?.[0]?.content?.parts?.[0]?.text;

        if (text) {
            res.status(200).json({ auditResult: text.trim() });
        } else {
            console.error("Invalid response structure from Google AI API:", result);
            res.status(500).json({ error: "The AI returned an empty or invalid response." });
        }

    } catch (error) {
        console.error("Internal Server Error:", error);
        res.status(500).json({ error: "There was an issue connecting to the AI analysis service." });
    }
}
